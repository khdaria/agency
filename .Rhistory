"facebook", "twitter","instagram","sex","city","byear")) %>% na.omit()
for(i in c("can_see_audio", "can_see_all_posts","can_post","can_write_private_message",
"facebook", "twitter","instagram","sex","city")){
users_sub[[i]] <- as.factor(users_sub[[i]])
}
# пример проверки гипотезы: девочки чаще закрывают личку
# с остальным по аналогии (кроме возраста, потому что это числовая, а не бинарная переменная)
users_sub %>% count(sex, can_write_private_message) %>%
ggplot(aes(sex, can_write_private_message)) +
geom_tile(aes(fill = n))
View(users_sub)
(
users <- readr::read_csv("random_users.csv")
View(users)
# выбираем нужные переменные и меняем тип
users_sub <- select(users, can_see_audio, can_see_all_posts, can_post,
can_write_private_message. facebook, twitter, instagram, sex, city, byear)) %>% na.omit()
# выбираем нужные переменные и меняем тип
users_sub <- select(users, can_see_audio, can_see_all_posts, can_post,
can_write_private_message, facebook, twitter, instagram, sex, city, byear)) %>% na.omit()
# выбираем нужные переменные и меняем тип
users_sub <- select(users, can_see_audio, can_see_all_posts, can_post,
can_write_private_message, facebook, twitter, instagram, sex, city, byear) %>% na.omit()
users$twitter <- ifelse(is.na(users$twitter), 0, 1)
users$facebook <- ifelse(is.na(users$facebook), 0, 1)
users$instagram <- ifelse(is.na(users$instagram), 0, 1)
users$sex <- ifelse(users$sex == 0, NA, users$sex)
users$city <- ifelse(users$city.id %in% c(1,2), "big","small")
# выбираем нужные переменные и меняем тип
users_sub <- select(users, can_see_audio, can_see_all_posts, can_post,
can_write_private_message, facebook, twitter, instagram, sex, city, byear) %>% na.omit()
#вытаскиваем год рождения и узнаём, что куча людей поставили себе что-то в стиле 1900
users$byear <- ifelse(str_count(users$bdate, "\\.") == 2, str_sub(users$bdate, start = -4), NA) %>% as.numeric()
# я сделала вид, что указавшие до 1950 ничего не указали, но можно выбрать другую границу
users$byear <- ifelse(users$byear < 1950, NA, users$byear)
# выбираем нужные переменные и меняем тип
users_sub <- select(users, can_see_audio, can_see_all_posts, can_post,
can_write_private_message, facebook, twitter, instagram, sex, city, byear) %>% na.omit()
for(i in c("can_see_audio", "can_see_all_posts","can_post","can_write_private_message",
"facebook", "twitter","instagram","sex","city")){
users_sub[[i]] <- as.factor(users_sub[[i]])
}
# пример проверки гипотезы: девочки чаще закрывают личку
# с остальным по аналогии (кроме возраста, потому что это числовая, а не бинарная переменная)
users_sub %>% count(sex, can_write_private_message) %>%
ggplot(aes(sex, can_write_private_message)) +
geom_tile(aes(fill = n))
vcd::assoc(sex ~ can_write_private_message, data = users_sub, shade = T)
vcd::assoc(sex ~ can_post, data = users_sub, shade = T)
vcd::assoc(sex ~ can_see_all_posts, data = users_sub, shade = T)
vcd::assoc(sex ~ can_see_audio, data = users_sub, shade = T)
vcd::assoc(sex ~ can_write_private_message, data = users_sub, shade = T)
par(mfrow = c(2,2))
vcd::assoc(sex ~ can_write_private_message, data = users_sub, shade = T)
vcd::assoc(sex ~ can_post, data = users_sub, shade = T)
vcd::assoc(sex ~ can_see_all_posts, data = users_sub, shade = T)
vcd::assoc(sex ~ can_see_audio, data = users_sub, shade = T)
par(mfrow = c(2,2))
ggplot(users_sub, aes(can_write_private_message, byear)) + geom_boxplot()
t.test(can_write_private_message ~ byear, data = users_sub)
t.test(byear ~ can_write_private_message, data = users_sub)
ggplot(users_sub, aes(can_write_private_message, byear)) + geom_violin()
vcd::assoc(sex ~ can_write_private_message, data = users_sub, shade = T)
vcd::assoc(sex ~ instagram, data = users_sub, shade = T)
vcd::assoc(sex ~ twitter, data = users_sub, shade = T)
vcd::assoc(sex ~ facebook, data = users_sub, shade = T)
users_sub %>% count(sex, facebook)
nrow(users_sub)
users_sub %>% count(sex, instagram)
users_sub %>% count(sex, twitter)
library(rjson)
library(tidyverse)
library(ggmap)
library(stringr)
json_file <- "https://raw.githubusercontent.com/alburov/slutsky/master/fines.json"
data <- fromJSON(paste(readLines(json_file), collapse=""))
fines <- fromJSON(data[[5]])
fines <- fines[[1]]
d <- lapply(fines, unlist)
d <- do.call(rbind.data.frame, d)
lon
fines <- d[-1,c(4,36,37)]
names(fines) <- c("type","lon","lat")
fines$lon <-  str_replace_all(fines$lon, ",","\\.") %>% as.numeric()
fines$lat <-  str_replace_all(fines$lat, ",","\\.") %>% as.numeric()
fines <- na.omit(fines)
map <- get_map(c(37.618423,55.751244), maptype = "roadmap")
ggmap(map) + geom_point(data = fines, aes(lat,lon)) + theme_nothing()
ggmap(map) + geom_point(data = fines, aes(lat,lon, color = type)) + theme_nothing()
?get_map
map <- get_map(c(37.618423,55.751244), maptype = "toner-lines")
ggmap(map) + geom_point(data = fines, aes(lat,lon, color = type)) + theme_nothing()
people %>% group_by(name, key) %>% mutate(id = 1:n())
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people %>% group_by(name, key) %>% mutate(id = 1:n())
ggmap(map) + geom_point(data = fines, aes(lat,lon, color = type)) + theme_nothing()
View(fines)
fines_speed <- filter(fines, type, starts_with("12.09") | starts_with("12.9"))
fines_speed <- filter(fines, type, str_detect("12.09") | str_detect("12.9"))
fines_speed <- filter(fines, str_detect(type, "12.09") | str_detect(type, "12.9"))
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon), alpha= 0.5) + theme_nothing()
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon), alpha= 0.5, color = "steelblue") + theme_nothing()
View(fines_speed)
unique(fines_speed$type)
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, color=type), alpha= 0.5) + theme_nothing()
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, color=type), alpha= 0.5) + theme_nothing()
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon), alpha= 0.5) + theme_nothing()
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, color = type), alpha= 0.5) + theme_nothing()
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, color = type)) + theme_nothing()
?gather
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type)) + theme_nothing()  + theme()
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type)) +
theme_nothing()  + theme(legend.position="bottom")
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type)) +
theme_minimal()  + theme(legend.position="bottom")
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type)) +
theme_minimal()  + theme(legend.position="bottom", legend.box = "vertical")
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type)) +
theme_minimal()  + theme(legend.position="bottom", legend.box = "horisontal")
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type)) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical")
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type)) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",legend.box.just = "top")
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type)) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 0)
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type)) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 1)
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type)) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 0.5)
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type)) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 0.5,
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type)б ышяу=5) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 0.5,
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())+
guides(fill=guide_legend(title="Нарушения"))
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type), size = 5=5) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 0.5,
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())+
guides(fill=guide_legend(title="Нарушения"))
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type), size =5) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 0.5,
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())+
guides(fill=guide_legend(title="Нарушения"))
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type), size =3) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 0.5,
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())+
guides(fill=guide_legend(title="Нарушения"))
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type), size =3) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 0.5,
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank())+
guides(fill=guide_legend(title="Нарушения")) + facet_wrap(~type)
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, shape = type, color = type), size =3) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 0.5,
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank())+
guides(fill=guide_legend(title="Нарушения")) + facet_wrap(~type)
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, color = type), size =2) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 0.5,
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank())+
guides(fill=guide_legend(title="Нарушения")) + facet_wrap(~type)
ggmap(map) + geom_point(data = fines_speed, aes(lat,lon, color = type), size =2) +
theme_minimal()  + theme(legend.position="bottom", legend.direction = "vertical",
legend.text.align = 0.5,
axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank())+
guides(fill=guide_legend(title="Нарушения")) + facet_wrap(~type) + scale_color_brewer(palette = "Set2")
read_csv("a b\n1 2", delim ="\s")
read_csv("a b\n1 2", delim ="\\s")
?read_csv
read_delim("a b\n1 2", delim ="\\s")
read_delim("a b\n1 2", delim ="s")
read_delim("a b\n1 2", delim =" ")
read_delim("a b\n1 2", delim ="\s")
?ggmap
?get_map
setwd("~/GitHub/agency")
knitr::opts_chunk$set(echo = TRUE)
hist(sample(1:10,10))
flea <- foreign::read.spss("C:/Users/Daria/Downloads/fleamarketresults.sav", to.data.frame = T)
library(tidyverse)
names(flea)
View(flea)
hist(flea$prediction_E)
ggplot(flea, aes(prediction_E)) + geom_histogram() + facet_wrap(~predict)
ggplot(flea, aes(prediction_E)) + geom_histogram() + facet_grid(outcome~predict)
aov(prediction_E ~ predict*outcome, data=flea)
aov(prediction_E ~ predict*outcome, data=flea) %>% summary()
aov(prediction_E ~ predict*outcome, data=flea) %>% summary() %>% pander::pander()
library(pander)
?pander
aov(prediction_E ~ predict*outcome, data=flea) %>% summary() %>% pander.anova()
aov(prediction_E ~ predict*outcome, data=flea) %>% summary() %>% pandoc.anova()
library(pander)
aov(prediction_E ~ predict*outcome, data=flea) %>% summary() %>% pandoc.anova()
?pander
?pander.anova
?pander.anova
?pander
?pandoc.table
aov(prediction_E ~ predict*outcome, data=flea) %>% summary() %>% pander(add.significance.stars = T,digits = 3)
?pander
?pander.anova
?pandoc.table
aov(prediction_E ~ predict*outcome, data=flea) %>% summary() %>% pandoc.table(add.significance.stars = T,digits = 3)
library(car)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(pander)
library(car)
flea <- foreign::read.spss("C:/Users/Daria/Downloads/fleamarketresults.sav", to.data.frame = T)
flea <- flea %>% unite(fair, predict, outcome, remove = F)
flea$offer <- ifelse(flea$fair %in% c("expected_happy/sale", "unexpected_angry/nosale"), "80","20")
model <- lm(prediction_E ~ predict*outcome,
data = flea,
contrasts = list(wool = "contr.sum", tension = "contr.poly"))
sstable <- Anova(model, type = 3)
sstable <- Anova(model, type = 3)
sstable
contrasts <- summary.aov(model, split = list(tension=list(L=1, Q=2)))[[1]][c(3, 4, 6, 7), c(2, 1, 4, 5)]
contrasts <- summary.aov(model)
contrasts
install.packages("apaTables")
library("apaTables")
apa.aov.table(aov(prediction_E ~ predict*outcome, data=flea))
apa.2way.table(aov(prediction_E ~ predict*outcome, data=flea))
apa.2way.table(predict, outcome,prediction_E, flea)
install.packages("MBESS")
apa.aov.table(aov(prediction_E ~ predict*outcome, data=flea))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(pander)
library(apaTables)
flea <- foreign::read.spss("C:/Users/Daria/Downloads/fleamarketresults.sav", to.data.frame = T)
flea <- flea %>% unite(fair, predict, outcome, remove = F)
flea$offer <- ifelse(flea$fair %in% c("expected_happy/sale", "unexpected_angry/nosale"), "80","20")
apa.aov.table(aov(prediction_E ~ predict*outcome, data=flea))
?apa.aov.table
x <-apa.aov.table(aov(prediction_E ~ predict*outcome, data=flea))
View(x$table_body)
x$table_body %>% pandoc.table()
x <- apa.2way.table(predict, outcome,prediction_E, flea)
x$table_body %>% pandoc.table()
x <- apa.2way.table(predict, outcome,prediction_E, flea)
x <- apa.2way.table(predict, outcome,prediction_E, flea)
x$table.body %>% pandoc.table()
x <-apa.aov.table(aov(prediction_E ~ predict*outcome, data=flea))
x$table.body %>% pandoc.table()
x <-apa.aov.table(aov(prediction_E ~ predict*outcome, data=flea))
y <-apa.aov.table(aov(prediction_E ~ predict*outcome, data=flea))
y$table.body %>% pandoc.table()
y$table_body %>% pandoc.table()
?pandoc.table
x$table_title
x <- apa.2way.table(predict, outcome,prediction_E, flea)
pandoc.table(x$table_body, caption = x$table_title)
names(x)
pandoc.table(x$table.body, caption = x$table.title)
pandoc.table(x$table.body, caption = x$table.title, style = "rmarkdown")
pandoc.table(x$table.body, caption = x$table.title, style = "simple")
pandoc.table(x$table.body, caption = x$table.title, style = "multiline")
pandoc.table(x$table.body, caption = x$table.title, style = "grid")
pandoc.table(x$table.body[,-ncol(x$table.body)], caption = x$table.title, style = "multiline")
pandoc.table(x$table.body[,-ncol(x$table.body)], caption = x$table.title)
-apa.aov.table(aov(prediction_E ~ predict*outcome, data=flea))
```{r warning=F, message=F}
names(flea)
flea <- foreign::read.spss("C:/Users/Daria/Downloads/fleamarketresults.sav", to.data.frame = T)
group_by(flea, outcome, predict) %>% summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E),
prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict)) +
geom_point(position = position_dodge(.1))+
geom_errorbar(aes(ymin=prediction_E-se, ymax=prediction_E+se),
width=.1, position = position_dodge(.1)) +
scale_color_brewer(palette = "Set2") + geom_line(aes(group = outcome))
group_by(flea, outcome, predict) %>% summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E),
prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict)) +
geom_point(position = position_dodge(.1))+
geom_errorbar(aes(ymin=prediction_E-se, ymax=prediction_E+se),
width=.1, position = position_dodge(.1)) +
scale_color_brewer(palette = "Set2") + geom_line(aes(group = predict))
group_by(flea, outcome, predict) %>% summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E),
prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict),position = position_dodge(.1)) +
geom_point()+
geom_errorbar(aes(ymin=prediction_E-se, ymax=prediction_E+se),
width=.1) +
scale_color_brewer(palette = "Set2") + geom_line(aes(group = predict))
?aov
?Anova
fit <- lm(prediction_E ~ predict*outcome, data=flea, options(contrasts=c(unordered="contr.sum", ordered="contr.poly")))
fit <- lm(prediction_E ~ predict*outcome, data=flea, options(contrasts=c(unordered="contr.sum", ordered="contr.poly")))
fit <- lm(prediction_E ~ predict*outcome, data=flea, options = contrasts=c(unordered="contr.sum", ordered="contr.poly"))
fit <- lm(prediction_E ~ predict*outcome, data=flea) %>% Anova( type="III")
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova( type="III")
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="I")
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="II")
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="II") %>% apa.aov.table()
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="III") %>% apa.aov.table()
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="III")
aov(prediction_E ~ predict*outcome, data=flea)
apa.aov.table(aov(prediction_E ~ predict*outcome, data=flea))
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="III")
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="II")
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="II")
apa.aov.table(aov(prediction_E ~ predict*outcome, data=flea))
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="II")
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="III")
lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="I")
?Anova
library(heplots)
install.packages("heplots")
library(heplots)
mod <- lm(prediction_E ~ predict*outcome, data=flea) %>% Anova(type="III")
etasq(mod, anova = TRUE)
?etasq
class(mod)
mod <- lm(prediction_E ~ predict*outcome, data=flea)
mod%>% Anova(type="III")
etasq(mod, anova = TRUE)
mod%>% Anova(type="II")
etasq(mod, anova = TRUE)
etasq(mod)
etasq(mod)
etasq(mod, anova = F)
etasq(mod, anova = T)
etasq(mod, anova = T,type="III")
etasq(lm(prediction_E ~ predict*outcome, data=flea), anova = T,type="III") %>% pandoc.table()
flea %>% group_by(predict) %>% summarise(mean(prediction_E), sd(prediction_E)) %>% writeLines()
flea %>% group_by(predict) %>% summarise(mean(prediction_E), sd(prediction_E)) %>% print
flea %>% group_by(predict) %>% summarise(mean(prediction_E), sd(prediction_E)) %>% print()
flea %>% group_by(predict) %>% summarise(mean(prediction_E), sd(prediction_E)) %>% pandoc.table()
flea %>% group_by(outcome) %>% summarise(mean(prediction_E), sd(prediction_E)) %>% pandoc.table()
flea %>% group_by(outcome) %>% summarise(mean(prediction_E), sd(prediction_E))
flea %>% group_by(outcome) %>% summarise(mean(prediction_E), sd(prediction_E)) %>% pander()
flea %>% group_by(predict) %>% summarise(mean(prediction_E), sd(prediction_E)) %>% as.data.frame() %>%pandoc.table()
?pandoc.table
etasq(lm(prediction_E ~ predict*outcome, data=flea), anova = T,type="III") %>% pandoc.table(round = 3, missing = "",keep.trailing.zeros=T)
etasq(lm(prediction_E ~ predict*outcome, data=flea), anova = T,type="III") %>% pandoc.table(round = 3, missing = "",keep.trailing.zeros=F)
names(flee)
names(flea)
flea %>% group_by(predict) %>% summarise(M = mean(causat),
SD = sd(causat)) %>%
as.data.frame() %>% pandoc.table(round = 3)
group_by(flea, outcome, predict) %>%
summarise(se = sd(causat)/sqrt(length(causat)),
sd = sd(causat), causat = mean(causat)) %>%
ggplot(aes(outcome, causat, color = predict, position = position_dodge(.1))) +
geom_point() +
geom_errorbar(aes(ymin=causat-se, ymax=causat+se), width=.1) +
scale_color_brewer(palette = "Set2") +
geom_line(aes(group = predict))
group_by(flea, outcome, predict) %>%
summarise(se = sd(causat)/sqrt(length(causat)),
sd = sd(causat), causat = mean(causat)) %>%
ggplot(aes(outcome, causat, color = predict, position = position_dodge(.1))) +
geom_point() +
geom_errorbar(aes(ymin=causat-se, ymax=causat+se), width=.1) +
scale_color_brewer(palette = "Set2") +
geom_line(aes(group = predict))
group_by(flea, outcome, predict) %>%
summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E), prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict),
position = position_dodge(.1)) +
geom_point() +
geom_errorbar(aes(ymin=prediction_E-se, ymax=prediction_E+se), width=.1) +
scale_color_brewer(palette = "Set2") +
geom_line(aes(group = predict))
group_by(flea, outcome, predict) %>%
summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E), prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict,
position = position_dodge(.1))) +
geom_point() +
geom_errorbar(aes(ymin=prediction_E-se, ymax=prediction_E+se), width=.1) +
scale_color_brewer(palette = "Set2") +
geom_line(aes(group = predict))
group_by(flea, outcome, predict) %>%
summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E), prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict)) +
geom_point(position = position_dodge(.1)) +
geom_errorbar(aes(ymin=prediction_E-se, ymax=prediction_E+se), width=.1,
position = position_dodge(.1)) +
scale_color_brewer(palette = "Set2") +
geom_line(aes(group = predict, position = position_dodge(.1)))
group_by(flea, outcome, predict) %>%
summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E), prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict)) +
geom_point(position = position_dodge(.1)) +
geom_errorbar(aes(ymin=prediction_E-se, ymax=prediction_E+se), width=.1),
group_by(flea, outcome, predict) %>%
summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E), prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict)) +
geom_point(position = position_dodge(.1)) +
geom_errorbar(aes(ymin=prediction_E-se, ymax=prediction_E+se), width=.1),
position = position_dodge(.1) +
group_by(flea, outcome, predict) %>%
summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E), prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict)) +
geom_point(position = position_dodge(.1)) +
geom_errorbar(aes(ymin=prediction_E-se, ymax=prediction_E+se), width=.1,
position = position_dodge(.1)) +
scale_color_brewer(palette = "Set2") +
geom_line(aes(group = predict), position = position_dodge(.1))
group_by(flea, outcome, predict) %>%
summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E), prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict)) +
geom_point(position = position_dodge(.1))
group_by(flea, outcome, predict) %>%
summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E), prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict)) +
geom_point(position = position_dodge(.1)) +
geom_errorbar(aes(ymin=prediction_E-se, ymax=prediction_E+se), width=.1,
position = position_dodge(.1))
group_by(flea, outcome, predict) %>%
summarise(se = sd(prediction_E)/sqrt(length(prediction_E)),
sd = sd(prediction_E), prediction_E = mean(prediction_E)) %>%
ggplot(aes(outcome, prediction_E, color = predict)) +
geom_point(position = position_dodge(.1)) +
geom_errorbar(aes(ymin=prediction_E-se, ymax=prediction_E+se), width=.1,
position = position_dodge(.1)) +
scale_color_brewer(palette = "Set2") +
geom_line(aes(group = predict), position = position_dodge(.1))
etasq(lm(causat ~ predict*outcome, data=flea), anova = T,type="II") %>% pandoc.table(round = 3, missing = "")
etasq(lm(causat ~ predict*outcome, data=flea), anova = T,type="III") %>% pandoc.table(round = 3, missing = "")
etasq(lm(causat ~ predict*outcome, data=flea), anova = T,type="III") %>% pandoc.table(round = 3, missing = "")
```{r warning=F, message=F, results = "asis",cache=F}
etasq(lm(prediction_E ~ predict*outcome, data=flea), anova = T,type="III") %>% pandoc.table(round = 3, missing = "")
?Anova
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(pander)
library(car)
library(heplots)
flea <- foreign::read.spss("C:/Users/Daria/Downloads/fleamarketresults.sav", to.data.frame = T)
flea <- flea %>% unite(fair, predict, outcome, remove = F)
flea$offer <- ifelse(flea$fair %in% c("expected_happy/sale", "unexpected_angry/nosale"), "80","20")
etasq(lm(prediction_E ~ predict*outcome, data=flea), anova = T,type="III") %>% pandoc.table(round = 3, missing = "")
```{r warning=F, message=F, results = "asis", cache=F}
?etasq
#flea <- flea %>% unite(fair, predict, outcome, remove = F)
#flea$offer <- ifelse(flea$fair %in% c("expected_happy/sale", "unexpected_angry/nosale"), "80","20")
flea <- foreign::read.spss("C:/Users/Daria/Downloads/fleamarketresults.sav", to.data.frame = T)
etasq(lm(prediction_E ~ predict*outcome, data=flea), anova = T,type="III") %>% pandoc.table(round = 3, missing = "")
etasq(lm(causat ~ predict*outcome, data=flea), anova = T,type="III") %>% pandoc.table(round = 3, missing = "")
etasq(lm(prediction_E ~ predict*outcome, data=flea), anova = T,type="II") %>% pandoc.table(round = 3, missing = "")
etasq(lm(prediction_E ~ predict*outcome, data=flea), anova = T,type="III") %>% pandoc.table(round = 3, missing = "")
?etasq
library(heplots)
etasq(lm(prediction_E ~ predict*outcome, data=flea), anova = T,type="III") %>% pandoc.table(round = 3, missing = "")
etasq(lm(prediction_E ~ predict*outcome, data=flea), anova = T,type="I") %>% pandoc.table(round = 3, missing = "")
